name: Build

on:
  workflow_dispatch:

env:
  flutter_channel: 'stable'
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:

  ci-pass:
    name: CI is green
    runs-on: ubuntu-latest
    needs:
      - build_release_assets
    steps:
      - run: exit 0

  build_release_assets:
    name: Build release assets
    strategy:
      fail-fast: false
      matrix:
        config:
          - target: windows
            host: windows-latest
            flutter_version: '2.10.3'
            go_version: '1.17'
          - target: macos
            host: macos-latest
            flutter_version: '2.10.3'
            go_version: '1.17'
          - target: linux
            host: ubuntu-latest
            flutter_version: '2.10.3'
            go_version: '1.17'
          - target: ios
            host: macos-latest
            flutter_version: '3.10.5'
            go_version: '1.23'
          - target: ios
            host: macos-latest
            flutter_version: '2.10.5'
            go_version: '1.23'
          - target: android-arm32
            host: ubuntu-latest
            flutter_version: '3.10.5'
            go_version: '1.23'
          - target: android-arm64
            host: ubuntu-latest
            flutter_version: '3.10.5'
            go_version: '1.23'
          - target: android-x86_64
            host: ubuntu-latest
            flutter_version: '3.10.5'
            go_version: '1.23'
          - target: android-arm32
            host: ubuntu-latest
            flutter_version: '2.10.5'
            go_version: '1.23'
          - target: android-arm64
            host: ubuntu-latest
            flutter_version: '2.10.5'
            go_version: '1.23'
          - target: android-x86_64
            host: ubuntu-latest
            flutter_version: '2.10.5'
            go_version: '1.23'

    runs-on: ${{ matrix.config.host }}

    env:
      TARGET: ${{ matrix.config.target }}
      flutter_version: ${{ matrix.config.flutter_version }}
      go_version: ${{ matrix.config.go_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}

      - name: Cache go modules (Linux/Android)
        if: matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' || matrix.config.target == 'linux'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go modules (macOS/ios)
        if: matrix.config.target == 'macos' || matrix.config.target == 'ios'
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go modules (Windows)
        if: matrix.config.target == 'windows'
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup flutter
        if: true
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.flutter_channel }}
          flutter-version: ${{ env.flutter_version }}
          architecture: x64

      - name: Check core
        if: true
        uses: actions/checkout@v3
        with:
          repository: 'niuhuan/wax-go-core'
          token: ${{ secrets.GH_TOKEN }}
          path: 'go'

      - name: Cache Flutter dependencies (Linux/Android)
        if: true && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' || matrix.config.target == 'linux' )
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter

      - name: Cache Flutter dependencies (Mac host)
        if: true && ( matrix.config.target == 'ios' || matrix.config.target == 'macos' )
        uses: actions/cache@v3
        with:
          path: /Users/runner/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter

      - name: Cache Gradle dependencies (Android)
        if: true && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup java (Android)
        if: true && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - if: true && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        name: Setup android tools (Android)
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546
          packages: 'platform-tools platforms;android-32 build-tools;30.0.2'
      
      # - if: true && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
      #   name: Install NDK
      #   run: sdkmanager "ndk;28.0.13004108"
          
      - name: Setup msys2 (Windows)
        if: true && matrix.config.target == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          install: gcc make

      - name: Install dependencies (Linux)
        if: true && matrix.config.target == 'linux'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          curl -JOL https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod a+x appimagetool-x86_64.AppImage
          mkdir -p ${GITHUB_WORKSPACE}/bin
          mv appimagetool-x86_64.AppImage ${GITHUB_WORKSPACE}/bin/appimagetool
          echo ::add-path::${GITHUB_WORKSPACE}/bin
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev libfuse2

      - name: Install hover (desktop)
        if: true && ( matrix.config.target == 'linux' || matrix.config.target == 'windows' || matrix.config.target == 'macos')
        run: |
          go install github.com/go-flutter-desktop/hover@latest

      - name: Install go mobile (mobile)
        if: true && ( matrix.config.target == 'ios' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-arm32' || matrix.config.target == 'android-x86_64' )
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest

      - name: Set-Version (All)
        if: true
        run: |
          cd ci
          cp version.code.txt ../lib/assets/version.txt

      - name: Upgrade deps version (flutter2 non-mac)
        if: true && matrix.config.host != 'macos-latest' && startsWith(matrix.config.flutter_version, '2')
        run: |
          sed -i "s/another_xlider: ^1.0.1+2/another_xlider: 1.0.1+2/g" pubspec.yaml
          sed -i "s/flutter_styled_toast: ^2.0.0/flutter_styled_toast: 2.0.0/g" pubspec.yaml
          sed -i "s/filesystem_picker: ^3.0.0-beta.1/filesystem_picker: 2.0.0/g" pubspec.yaml
          sed -i "s/file_picker: ^5.2.1/file_picker: 4.6.1/g" pubspec.yaml
          sed -i "s/multi_select_flutter: ^4.0.0/multi_select_flutter: 4.1.2/g" pubspec.yaml
          sed -i "s/modal_bottom_sheet: ^3.0.0-pre/modal_bottom_sheet: 2.0.1/g" pubspec.yaml
          sed -i "s/photo_view: ^0.14.0/photo_view: 0.13.0/g" pubspec.yaml
          flutter pub get

      - name: Upgrade deps version (flutter2 mac)
        if: true && matrix.config.host == 'macos-latest' && startsWith(matrix.config.flutter_version, '2')
        run: |
          brew install gnu-sed
          gsed -i "s/another_xlider: ^1.0.1+2/another_xlider: 1.0.1+2/g" pubspec.yaml
          gsed -i "s/flutter_styled_toast: ^2.0.0/flutter_styled_toast: 2.0.0/g" pubspec.yaml
          gsed -i "s/filesystem_picker: ^3.0.0-beta.1/filesystem_picker: 2.0.0/g" pubspec.yaml
          gsed -i "s/file_picker: ^5.2.1/file_picker: 4.6.1/g" pubspec.yaml
          gsed -i "s/multi_select_flutter: ^4.0.0/multi_select_flutter: 4.1.2/g" pubspec.yaml
          gsed -i "s/multi_select_flutter: ^4.0.0/multi_select_flutter: 4.1.2/g" pubspec.yaml
          gsed -i "s/modal_bottom_sheet: ^3.0.0-pre/modal_bottom_sheet: 2.0.1/g" pubspec.yaml
          flutter pub get

      - name: Build (windows)
        if: true && matrix.config.target == 'windows'
        run: |
          hover build windows
          curl -JOL https://github.com/niuhuan/static-resources/releases/download/windows_build_tools/Resource_Hacker_5.1.8.zip
          Expand-Archive .\Resource_Hacker_5.1.8.zip
          cmd /c "Resource_Hacker_5.1.8\ResourceHacker.exe" -open go\build\outputs\windows-release\wax.exe -save go\build\outputs\windows-release\wax.exe -action addskip -res go/assets/icon.ico -mask ICONGROUP,MAINICON,0
          cd go\build\outputs\windows-release
          DEL flutter_engine.pdb
          DEL flutter_engine.exp
          DEL flutter_engine.lib
          Compress-Archive * ../../../../build/build.zip

      - name: Build (macos)
        if: true && matrix.config.target == 'macos'
        run: |
          hover build darwin-dmg
          mv go/build/outputs/darwin-dmg-release/*.dmg build/build.dmg

      - name: Build (linux)
        if: true && matrix.config.target == 'linux'
        run: |
          curl -JOL https://github.com/junmer/source-han-serif-ttf/raw/master/SubsetTTF/CN/SourceHanSerifCN-Regular.ttf
          mkdir -p fonts
          mv SourceHanSerifCN-Regular.ttf fonts/Roboto.ttf
          cat ci/linux_font.yaml >> pubspec.yaml
          hover build linux-appimage
          mv go/build/outputs/linux-appimage-release/*.AppImage build/build.AppImage

      - name: Append application-identifier (ios)
        if: true && matrix.config.target == 'ios'
        run: |
          /usr/libexec/PlistBuddy -c 'Add :application-identifier string niuhuan.wax' ios/Runner/Info.plist

      - name: Build (ios)
        if: true && matrix.config.target == 'ios'
        run: |
          sh scripts/build-ipa.sh

      - name: Build (android-arm32)
        if: true && matrix.config.target == 'android-arm32'
        run: |
          sh scripts/build-apk-arm.sh

      - name: Build (android-arm64)
        if: true && matrix.config.target == 'android-arm64'
        run: |
          sh scripts/build-apk-arm64.sh

      - name: Build (android-x86_64)
        if: true && matrix.config.target == 'android-x86_64'
        run: |
          sh scripts/build-apk-x64.sh

      - name: Sign APK (Android)
        if: true && ( matrix.config.target == 'android-arm32' || matrix.config.target == 'android-arm64' || matrix.config.target == 'android-x86_64' )
        env:
          KEY_FILE_BASE64: ${{ secrets.KEY_FILE_BASE64 }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          sh scripts/sign-apk-github-actions.sh

      - if: steps.need_build.outputs.need_build == 'true' && matrix.config.target == 'ios'
        name: 'Upload Artifact (iOS)'
        uses: actions/upload-artifact@v4
        with:
          name: 'nosign-${{ env.flutter_version }}.ipa'
          path: 'build/nosign.ipa'
          retention-days: 3
      - if: steps.need_build.outputs.need_build == 'true' && matrix.config.target == 'android'
        name: 'Upload Artifact (Android)'
        uses: actions/upload-artifact@v4
        with:
          name: 'app-release-${{ env.flutter_version }}.apk'
          path: 'build/app/outputs/flutter-apk/app-release.apk'
          retention-days: 3
      - if: steps.need_build.outputs.need_build == 'true' && matrix.config.target == 'linux'
        name: 'Upload Artifact (Linux)'
        uses: actions/upload-artifact@v4
        with:
          name: 'build-${{ env.flutter_version }}.AppImage'
          path: 'build/build.AppImage'
          retention-days: 3
      - if: steps.need_build.outputs.need_build == 'true' && matrix.config.target == 'macos'
        name: 'Upload Artifact (MacOS)'
        uses: actions/upload-artifact@v4
        with:
          name: 'build-${{ env.flutter_version }}.dmg'
          path: 'build/build.dmg'

